"use strict";(self.webpackChunkjoy_treasury=self.webpackChunkjoy_treasury||[]).push([[4353],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/card-preview-cafe2/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const CardPreviewCafe2raw_namespaceObject='import * as React from "react";\nimport StarIcon from "@mui/icons-material/Star";\nimport AspectRatio from "@mui/joy/AspectRatio";\nimport Card from "@mui/joy/Card";\nimport CardContent from "@mui/joy/CardContent";\nimport CardOverflow from "@mui/joy/CardOverflow";\nimport Stack, { StackProps } from "@mui/joy/Stack";\nimport Typography from "@mui/joy/Typography";\n\ninterface RatingProps extends StackProps {\n  rating?: number;\n}\n\nconst Rating = (props: RatingProps) => {\n  const ratingArr = [1, 2, 3, 4, 5];\n  let { rating } = props;\n  const MAX_RANK = 5;\n  const MIN_RATING = 0;\n  let roundedRating = rating;\n  if (roundedRating) {\n    if (roundedRating > MAX_RANK) roundedRating = MAX_RANK;\n    if (roundedRating < MIN_RATING) roundedRating = MIN_RATING;\n\n    roundedRating = Math.round(roundedRating);\n  }\n  let filledPercentage = rating ? (rating - Math.floor(rating)) * 100 : 0;\n\n  return (\n    <Stack {...props}>\n      {ratingArr.map((i) => {\n        let isFilledPartially = (rating ?? 0) - i < 0;\n        return (\n          <React.Fragment key={i}>\n            <StarIcon\n              size="sm"\n              sx={{\n                fill: isFilledPartially ? `url(#linearColors)` : "orange",\n                stroke: "orange",\n                strokeWidth: 1,\n              }}\n            />\n          </React.Fragment>\n        );\n      })}\n      <Typography fontSize="sm" textColor="#000">\n        {rating}\n      </Typography>\n      {filledPercentage ? (\n        <svg width={0} height={0}>\n          <linearGradient id="linearColors">\n            <stop offset={`${filledPercentage}%`} stopColor="orange" />\n            <stop offset={`0%`} stopColor="white" />\n          </linearGradient>\n        </svg>\n      ) : undefined}\n    </Stack>\n  );\n};\n\nexport default function CardPreviewCafe2() {\n  const imgUrl =\n    "https://images.unsplash.com/photo-1567880905822-56f8e06fe630?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1935&q=80";\n  return (\n    <Card\n      orientation="horizontal"\n      variant="outlined"\n      sx={{ width: "100%", bgcolor: "#fff", p: 2 }}\n    >\n      <CardOverflow>\n        <AspectRatio ratio="1" sx={{ width: 125 }}>\n          <img src={imgUrl} loading="lazy" alt="" />\n        </AspectRatio>\n      </CardOverflow>\n      <CardContent>\n        <Stack\n          direction="row"\n          justifyContent="space-between"\n          sx={{ width: "100%" }}\n        >\n          <Typography fontWeight="xl" textColor="#000">\n            Sejoli Cafe\n          </Typography>\n          <Typography fontWeight="xl" textColor="#000" level="body-sm">\n            1.2km\n          </Typography>\n        </Stack>\n        <Typography level="body-sm">Europe, Tea, Coffee</Typography>\n        <Rating\n          direction="row"\n          spacing={1}\n          rating={4.6}\n          sx={{\n            flexGrow: 1,\n            alignItems: "flex-end",\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n}\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Card/Preview/Cafe2"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx joy-treasury@latest clone card-preview-cafe2\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cardpreviewcafe2",children:"CardPreviewCafe2"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:CardPreviewCafe2raw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);